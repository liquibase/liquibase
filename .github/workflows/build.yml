name: Build and Test

on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
  push:
    branches:
      - master
      - main

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    outputs:
      proBranchName: ${{ steps.find-branches.outputs.proBranchName }}
      proBranchSha: ${{ steps.find-branches.outputs.proBranchSha }}
      thisSha: ${{ steps.find-branches.outputs.thisSha }}
      thisBranchName: ${{ steps.find-branches.outputs.thisBranchName }}
      standAlonePR: ${{ steps.find-branches.outputs.standAlonePR }}
      stablePro: ${{ steps.find-branches.outputs.stablePro }}
    steps:
      - uses: actions/checkout@v2

      - name: Find corresponding branches
        id: find-branches
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.BOT_TOKEN }}
          script: |
            const helper = require('./.github/util/workflow-helper.js')({github, context});

            core.setOutput("thisSha", helper.getCurrentSha());
            core.setOutput("thisBranchName", helper.getCurrentBranch());

            let branch = await helper.findMatchingBranch("liquibase", "liquibase-pro");
            core.setOutput("proBranchName", branch.name);
            core.setOutput("proBranchSha", branch.sha);

            //count as not a stand-alone PR for branch builds on master/main, even though there are no PRs
            if (helper.getCurrentBranch() == 'master' || helper.getCurrentBranch() == 'main' && branch.pullRequestId) {
              core.setOutput("standAlonePR", helper.getCurrentBranch() !== branch.name);
            } else {
              core.setOutput("standAlonePR", true);
            }

            let proStatusMessage = "success";
            let proFailed = false;

            if (!branch.workflowId) {
              proStatusMessage = "does not have a ran workflow";
              proFailed = true
            } else if ( branch.runStatus != "completed") {
              proStatusMessage = "build is "+ branch.runStatus;
              proFailed = true
            } else if ( branch.runConclusion != "success") {
              proStatusMessage = "build conclusion was "+branch.runConclusion;
              proFailed = true
            }

            statusMessage = "liquibase/liquibase-pro:"+branch.name+"@" + branch.sha.substring(0, 7) + " " + proStatusMessage;
            console.log("Pro failed?" + proFailed + ": "+statusMessage);

            github.rest.repos.createCommitStatus({
              "owner": "liquibase",
              "repo": "liquibase",
              "sha": helper.getCurrentSha(),
              "state": (proFailed ? "failure" : "success"),
              "target_url": branch.runHtmlUrl,
              "context": "Stable Liquibase Pro",
              "description": statusMessage
            });

            core.setOutput("stablePro", !proFailed);

  build:
    name: Build & Test (Java ${{ matrix.java }})
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        java: [ 8, 11, 16 ]
    steps:
      - uses: actions/checkout@v2

      - name: Built Code Cache
        if: ${{ matrix.java == 8}}
        uses: actions/cache@v2
        with:
          key: built-code-${{ github.sha }}
          path: ./**/target
      - name: Set up JDK ${{ matrix.java }}
        uses: actions/setup-java@v2
        with:
          java-version: ${{ matrix.java }}
          distribution: 'adopt'
      - name: Build & Test
        run: |
          mvn -B -Dbuild.branch=${{ needs.setup.outputs.thisBranchName }} -Dbuild.number=${{ github.run_number }} -Dbuild.commit=${{ needs.setup.outputs.thisSha }} -DtrimStackTrace=false -pl '!liquibase-dist' clean test package surefire-report:report
          find . -name original-*.jar -exec rm {} \;
      - name: Archive Test Results
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: liquibase-test-results-jdk${{ matrix.java }}
          path: |
            ./**/target/surefire-reports
            ./**/target/site

      - name: Archive Modules
        if: ${{ matrix.java == 8}}
        uses: actions/upload-artifact@v2
        with:
          name: liquibase-modules
          path: |
            */target/*-0-SNAPSHOT.jar

  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 8
        uses: actions/setup-java@v2
        with:
          java-version: '8'
          distribution: 'adopt'
      - name: Restore Built Code Cache
        uses: actions/cache@v2
        with:
          key: built-code-${{ github.sha }}
          path: ./**/target

      - name: Login to Artifactory
        uses: docker/login-action@v1
        with:
          registry: docker-dev.artifactory.datical.net
          username: ${{ secrets.ARTIFACTORY_USER }}
          password: ${{ secrets.ARTIFACTORY_TOKEN }}
      - name: Start Docker Databases
        run: docker-compose -f ./liquibase-integration-tests/docker/docker-compose.yml up -d
      - name: Run Tests
        run: mvn -B jar:jar jar:test-jar surefire:test -DtrimStackTrace=false
      - name: Stop Docker Databases
        run: docker-compose -f ./liquibase-integration-tests/docker/docker-compose.yml down
      - name: Archive Test Results
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: liquibase-test-results-integration
          path: |
            ./**/target/surefire-reports

  package:
    name: Package Artifacts
    runs-on: ubuntu-latest
    needs: [ setup, build ]
    steps:
      - uses: actions/checkout@v2

      - name: Built Code Cache
        uses: actions/cache@v2
        with:
          key: built-code-${{ github.sha }}
          path: ./**/target
      - name: Install4j Cache
        uses: actions/cache@v2
        with:
          key: install4j8-
          path: ~/.install4j

      - name: Set up JDK 8
        uses: actions/setup-java@v2
        with:
          java-version: '8'
          distribution: 'adopt'
          gpg-private-key: ${{ secrets.GPG_SECRET }}
          gpg-passphrase: GPG_PASSPHRASE
        env:
          GPG_PASSWORD: ${{ secrets.GPG_PASSPHRASE }}

      - name: Download liquibase-pro
        uses: dawidd6/action-download-artifact@v2
        if: "false" # ${{ always() }}
        with:
          github_token: ${{ secrets.BOT_TOKEN }}
          workflow: build.yml
          workflow_conclusion: success
          branch: "${{ needs.setup.outputs.proBranchName }}"
          name: liquibase-pro-modules
          path: download/liquibase-pro
          repo: liquibase/liquibase-pro

      - name: Install Built Modules
        run: |
          (find . -name *-SNAPSHOT.jar -exec mvn -B org.apache.maven.plugins:maven-install-plugin:3.0.0-M1:install-file -Dfile={} \;)
#          mvn -B org.apache.maven.plugins:maven-install-plugin:3.0.0-M1:install-file -Dfile=download/liquibase-pro/liquibase-pro-0-SNAPSHOT.jar

      - name: Build & Sign Artifacts
        env:
          INSTALL4J_LICENSE: ${{ secrets.INSTALL4J_LICENSE }}
          GPG_PASSWORD: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          mvn -B -pl liquibase-dist -P liquibase-pro package
          (cd liquibase-dist && src/main/package/package-install4j.sh 0-SNAPSHOT)

          find . -name original-*.jar -exec rm {} \;

          mkdir -p artifacts
          cp liquibase-dist/target/liquibase-0-SNAPSHOT.tar.gz* artifacts
          cp liquibase-dist/target/liquibase-0-SNAPSHOT.zip* artifacts
          cp liquibase-dist/target/liquibase-0-SNAPSHOT.jar* artifacts
          cp liquibase-dist/target/liquibase-*-installer-* artifacts
          cp liquibase-maven-plugin/target/liquibase-maven-plugin-0-SNAPSHOT.jar artifacts
          cp liquibase-cdi/target/liquibase-cdi-0-SNAPSHOT.jar artifacts

          liquibase-dist/src/main/package/sign-artifacts.sh artifacts


      - name: Archive Packages
        uses: actions/upload-artifact@v2
        with:
          name: liquibase-artifacts
          path: artifacts/*

## convenience zip for faster download
      - name: Archive Zip
        uses: actions/upload-artifact@v2
        with:
          name: liquibase-0-SNAPSHOT
          path: liquibase-dist/target/liquibase-0-SNAPSHOT/*

  finish:
    name: Finish Build
    runs-on: ubuntu-latest
    needs: [ setup, build, integration-test, package ]
    if: "false" # ${{ always() }}
    steps:
      - uses: actions/checkout@v2

      - name: Coordinate Liquibase-Pro
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.BOT_TOKEN }}
          script: |
            const helper = require('./.github/util/workflow-helper.js')({github, context});
            let currentBranchInfo = await helper.findMatchingBranch("liquibase", "liquibase-pro");

            let thisStatus = "${{ needs.package.result }}" == "success" ? "success" : "failure";
            let stablePro = ("${{ needs.setup.outputs.stablePro }}" == "true");
            let standalonePR = "${{ needs.setup.outputs.standAlonePR }}" == "true";

            console.log("Stand alone PR: "+standalonePR);

            let runFunctionalTests = false;
            let markFunctionalTestsStatus = "failure";
            let markFunctionalTestsDescription = "Unexpected setup";

            if (stablePro) {
              console.log("Pro is stable");

              runFunctionalTests = true;
              markFunctionalTestsStatus = "pending";
              markFunctionalTestsDescription = "Trigger internal functional tests";
            } else {
              console.log("Last pro was unstable");

              runFunctionalTests = false;
              markFunctionalTestsStatus = "failure";
              markFunctionalTestsDescription = "Liquibase Pro is unstable";

              let checks = await github.rest.repos.listCommitStatusesForRef({
                "owner": "liquibase",
                "repo": "liquibase-pro",
                "ref": currentBranchInfo.sha
              });

              console.log("See statuses");
              let failedCheckingUs = false;
              for (let status of checks.data) {
                if (status.context == "Stable Liquibase Core") {
                  console.log("Stable Liquibase Core is "+ status.state);
                  failedCheckingUs = (status.state == "failure");
                }
              }

              if (failedCheckingUs) {
                console.log("Rerun liquibase-pro that was waiting on us");
                await github.rest.actions.retryWorkflow({
                    "owner": "liquibase",
                    "repo": "liquibase-pro",
                    "run_id": currentBranchInfo.workflowId
                });
              }
            }

            if (standalonePR) {
              console.log("Do not mark base pro branch as included in this");
            } else {
              console.log("Mark 'Included in Liquibase Core' status as "+thisStatus);
              github.rest.repos.createCommitStatus({
                "owner": "liquibase",
                "repo": "liquibase-pro",
                "sha": currentBranchInfo.sha,
                "state": thisStatus,
                "context": "Stable Liquibase Core",
                "target_url": currentBranchInfo.runHtmlUrl,
                "description": "Latest Liquibase Core build"
              });
            }

            if (runFunctionalTests) {
              let testsBranch = await helper.findMatchingBranch("liquibase", "liquibase-pro-tests");

              console.log("Trigger functional tests");
              let workflowDispatch = await github.rest.actions.createWorkflowDispatch({
                "owner": "liquibase",
                "repo": "liquibase-pro-tests",
                "workflow_id": "test.yml",
                "ref": testsBranch.name,
                "inputs": {
                  "liquibaseCommit": helper.getCurrentSha()
                }
              });
            }

            await github.rest.repos.createCommitStatus({
              "owner": "liquibase",
              "repo": "liquibase",
              "sha": helper.getCurrentSha(),
              "state": markFunctionalTestsStatus,
              "context": "Run Functional Tests",
              "description": markFunctionalTestsDescription
            });

