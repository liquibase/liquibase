name: Build Test Installers

on:
  workflow_dispatch:
  push:
    branches:
      - gha-scheduled-*


jobs:
  build-installers:
    name: Build Installers
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK for GPG
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          gpg-private-key: ${{ secrets.GPG_SECRET }}
          gpg-passphrase: GPG_PASSPHRASE
          overwrite-settings: false
        env:
          GPG_PASSWORD: ${{ secrets.GPG_PASSPHRASE }}

      - name: Install Node.js, NPM and Yarn 
        uses: actions/setup-node@v2 
        with:  
          node-version: 14 
      
      - name: NuGet Install 
        uses: NuGet/setup-nuget@v1.0.5 
        with: 
          nuget-version: latest 
          
      # TODO: Add install4j and DigiCert KeyLocker Client Tools caching if possible
      # - name: Cache Install4j
      #   id: cache-install4j
      #   uses: actions/cache@v4
      #   with:
      #     path: /usr/local/bin/install4jc
      #     key: install4j-${{ runner.os }}-10_0_9

      # - name: Install Install4j (if not cached)
      #   if: steps.cache-install4j.outputs.cache-hit != 'true'
      #   run: |
      #     wget -nv -O install4j.deb "https://download.ej-technologies.com/install4j/install4j_linux-x64_10_0_9.deb"
      #     sudo apt install -y ./install4j.deb
      #     rm install4j.deb

      - name: Download liquibase-artifacts
        uses: dawidd6/action-download-artifact@v8
        with:
          workflow: run-tests.yml
          #run_id: ${{ needs.setup.outputs.runId }}
          workflow_conclusion: success
          branch: ${{ github.head_ref }}
          name: liquibase-artifacts
          path: download/liquibase-artifacts

      # - name: Download liquibase-artifacts
      #   uses: liquibase/action-download-artifact@v2-liquibase
      #   with:
      #     workflow: run-tests.yml
      #     workflow_conclusion: success
      #     branch: ${{ github.head_ref }}
      #     name: liquibase-artifacts
      #     path: re-version/final
      
      - name: Set branch variable
        run: echo "BRANCH=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
        
      - name: Setup Certificate
        run: |
            echo "${{ secrets.SM_CLIENT_CERT_FILE_B64 }}" | base64 --decode > /d/Certificate_pkcs12.p12
            cat  /d/Certificate_pkcs12.p12
        shell: bash  
        
      - name: Set variables
        id: variables
        run: |
          dir
          echo "::set-output name=version::${GITHUB_REF#refs/tags/v}"
          echo "::set-output name=KEYPAIR_NAME::gt-standard-keypair"
          echo "::set-output name=CERTIFICATE_NAME::gt-certificate"
          echo "SM_HOST=${{ secrets.SM_HOST }}" >> "$GITHUB_ENV"
          echo "SM_API_KEY=${{ secrets.SM_API_KEY }}" >> "$GITHUB_ENV"
          echo "SM_CLIENT_CERT_FILE=D:\\Certificate_pkcs12.p12" >> "$GITHUB_ENV"
          echo "SM_CLIENT_CERT_PASSWORD=${{ secrets.SM_CLIENT_CERT_PASSWORD }}" >> "$GITHUB_ENV"
          echo "C:\Program Files (x86)\Windows Kits\10\App Certification Kit" >> $GITHUB_PATH
          echo "C:\Program Files (x86)\Microsoft SDKs\Windows\v10.0A\bin\NETFX 4.8 Tools" >> $GITHUB_PATH
          echo "C:\Program Files\DigiCert\DigiCert Keylocker Tools" >> $GITHUB_PATH
        shell: bash

      - name: Setup Keylocker KSP on windows 
        run: | 
          curl -X GET  https://one.digicert.com/signingmanager/api-ui/v1/releases/Keylockertools-windows-x64.msi/download -H "x-api-key:%SM_API_KEY%" -o Keylockertools-windows-x64.msi 
          msiexec /i Keylockertools-windows-x64.msi /quiet /qn
          smksp_registrar.exe list 
          smctl.exe keypair ls 
          C:\Windows\System32\certutil.exe -csp "DigiCert Signing Manager KSP" -key -user
        shell: cmd 
        
      - name: Certificates Sync       
        run: |
            smctl windows certsync
        shell: cmd
        
      - name: Build Unsigned Windows Installer
        env:
          INSTALL4J_LICENSE_KEY: ${{ secrets.INSTALL4J_10_LICENSE }}
        run: |
          tarFile=$(pwd)/re-version/final/liquibase-${BRANCH}-SNAPSHOT.tar.gz
          scriptDir=$(pwd)/.github/util/
          
          mkdir -p liquibase-dist/target/liquibase-0-SNAPSHOT
          (cd liquibase-dist/target/liquibase-0-SNAPSHOT && tar xfz $tarFile)
          (cd liquibase-dist && $scriptDir/package-install4j.sh 0-SNAPSHOT)
          mv liquibase-dist/target/liquibase-*-installer-* re-version/final
        shell: bash

      - name: Find Unsigned Windows Installer
        id: find-installer
        run: |
          INSTALLER_PATH=$(find re-version/final -name "liquibase-*-installer-*" | head -n 1)
          if [ -z "$INSTALLER_PATH" ]; then
            echo "Error: No installer file found!"
            exit 1
          fi
          echo "Found installer: $INSTALLER_PATH"
          echo "INSTALLER_PATH=$INSTALLER_PATH" >> $GITHUB_ENV
        shell: bash

      - name: Signing using Signtool
        run: |
          signtool.exe sign /sha1 ${{ secrets.SM_CODE_SIGNING_CERT_SHA1_HASH }} /tr http://timestamp.digicert.com /td SHA256 /fd SHA256 "$INSTALLER_PATH"
          signtool.exe verify /v /pa "$INSTALLER_PATH"

      - name: GPG Sign Artifacts (After Code Signing the Windows Installer)
        env:
          GPG_PASSWORD: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          .github/util/sign-artifacts.sh re-version/final

      - name: Re-version Installers
        run: |
          (cd re-version/final && zip liquibase-additional-0-SNAPSHOT.zip *.asc *.md5 *.sha1)
          rm re-version/final/*.asc
          rm re-version/final/*.md5
          rm re-version/final/*.sha1

      - name: Archive Packages
        uses: actions/upload-artifact@v4
        with:
          name: liquibase-test-packages
          path: re-version/final/*

