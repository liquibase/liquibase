name: Build & Deploy extensions

permissions:
  contents: write
  packages: write
  actions: write
  id-token: write

on:
  workflow_call:
    inputs:
      liquibase-version:
        description: "liquibase version"
        required: true
        type: string
      dependencies:
        description: "Comma separated list of needed dependencies to release the extensions list"
        required: false
        type: string
      extensions:
        description: "Comma separated list of extensions to release to GPM"
        required: true
        type: string
      branch:
        description: "branch to check out"
        required: true
        type: string
  workflow_dispatch:
    inputs:
      liquibase-version:
        description: "liquibase version"
        required: true
        type: string
      dependencies:
        description: "Comma separated list of needed dependencies to release the extensions list"
        required: false
        type: string
      extensions:
        description: "Comma separated list of extensions to release to GPM"
        required: true
        type: string
      branch:
        description: "branch to check out"
        required: true
        type: string

env:
  MAVEN_VERSION: "3.9.2"

jobs:
  setup_matrix:
    runs-on: ubuntu-latest
    outputs:
      dependencies_matrix: ${{ steps.setup_dependencies_matrix.outputs.matrix_output }}
      extensions_matrix: ${{ steps.setup_extensions_matrix.outputs.matrix_output }}
    steps:
      - id: setup_dependencies_matrix
        uses: cschadewitz/dynamic-matrix-input@v1.0.0
        with:
          matrix_input: ${{ inputs.dependencies }}
      - id: setup_extensions_matrix
        uses: cschadewitz/dynamic-matrix-input@v1.0.0
        with:
          matrix_input: ${{ inputs.extensions }}

  delete-dependency-packages:
    needs: setup_matrix
    runs-on: ubuntu-22.04
    continue-on-error: true
    strategy:
      matrix:
        dependencies: ${{ fromJson(needs.setup_matrix.outputs.dependencies_matrix) }}
    steps:

      - name: Configure AWS credentials for vault access
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.LIQUIBASE_VAULT_OIDC_ROLE_ARN }}
          aws-region: us-east-1

      - name: Get secrets from vault
        id: vault-secrets
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: |
            ,/vault/liquibase
          parse-json-secrets: true

      - name: Get GitHub App token
        id: get-token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ env.LIQUIBASE_GITHUB_APP_ID }}
          private-key: ${{ env.LIQUIBASE_GITHUB_APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}
          permission-packages: write
          permission-contents: read

      - uses: actions/delete-package-versions@v5
        with:
          package-name: org.liquibase.ext.${{ matrix.dependencies }}
          package-type: "maven"
          token: ${{ steps.get-token.outputs.token }}
          ignore-versions: "^((?!${{ inputs.liquibase-version }}$).)*$"

  delete-extension-packages:
    needs: setup_matrix
    runs-on: ubuntu-22.04
    continue-on-error: true
    strategy:
      matrix:
        extensions: ${{ fromJson(needs.setup_matrix.outputs.extensions_matrix) }}
    steps:

      - name: Configure AWS credentials for vault access
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.LIQUIBASE_VAULT_OIDC_ROLE_ARN }}
          aws-region: us-east-1

      - name: Get secrets from vault
        id: vault-secrets
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: |
            ,/vault/liquibase
          parse-json-secrets: true

      - name: Get GitHub App token
        id: get-token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ env.LIQUIBASE_GITHUB_APP_ID }}
          private-key: ${{ env.LIQUIBASE_GITHUB_APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}
          permission-packages: write
          permission-contents: read

      - uses: actions/delete-package-versions@v5
        with:
          package-name: org.liquibase.ext.${{ matrix.extensions }}
          package-type: "maven"
          token: ${{ steps.get-token.outputs.token }}
          ignore-versions: "^((?!${{ inputs.liquibase-version }}$).)*$"

  matching-branch-logic-extensions:
    runs-on: ubuntu-latest
    outputs:
      extensions_branch: ${{ steps.get-extensions-branch.outputs.extensions_branch }}
    steps:
      - id: get-extensions-branch
        name: Get Extensions branch to use
        run: |
          if [ "${{ inputs.branch }}" == "master" ]; then
            echo "extensions_branch=main" >> "$GITHUB_OUTPUT"
          else
            echo "extensions_branch=${{ inputs.branch }}" >> "$GITHUB_OUTPUT"
          fi

  matching-branch-logic-pro:
    runs-on: ubuntu-latest
    outputs:
      pro_branch: ${{ steps.get-pro-branch.outputs.pro_branch }}
    steps:
      - id: get-pro-branch
        name: Get Pro branch to use
        run: |
          if [ "${{ inputs.branch }}" == "master" ]; then
            echo "pro_branch=master" >> "$GITHUB_OUTPUT"
          else
            echo "pro_branch=${{ inputs.branch }}" >> "$GITHUB_OUTPUT"
          fi

  get-liquibase-checks-version:
    if: ${{ contains(inputs.extensions, 'liquibase-checks') }}
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract-version.outputs.version }}
    steps:

      - name: Configure AWS credentials for vault access
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.LIQUIBASE_VAULT_OIDC_ROLE_ARN }}
          aws-region: us-east-1

      - name: Get secrets from vault
        id: vault-secrets
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: |
            ,/vault/liquibase
          parse-json-secrets: true

      - name: Get GitHub App token
        id: get-token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ env.LIQUIBASE_GITHUB_APP_ID }}
          private-key: ${{ env.LIQUIBASE_GITHUB_APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}
          repositories: liquibase-checks
          permission-contents: read

      - uses: actions/checkout@v4
        with:
          repository: liquibase/liquibase-checks
          token: ${{ steps.get-token.outputs.token }}

      - id: extract-version
        name: Extract version from pom.xml
        shell: bash
        run: |
          VERSION=$(grep '<version>' pom.xml | head -n 1 | sed 's/.*<version>\(.*\)-SNAPSHOT<\/version>.*/\1/')
          echo "version=$VERSION" >> $GITHUB_OUTPUT

  delete-checks-packages:
    needs: [get-liquibase-checks-version]
    runs-on: ubuntu-22.04
    continue-on-error: true
    steps:

      - name: Configure AWS credentials for vault access
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.LIQUIBASE_VAULT_OIDC_ROLE_ARN }}
          aws-region: us-east-1

      - name: Get secrets from vault
        id: vault-secrets
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: |
            ,/vault/liquibase
          parse-json-secrets: true

      - name: Get GitHub App token
        id: get-token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ env.LIQUIBASE_GITHUB_APP_ID }}
          private-key: ${{ env.LIQUIBASE_GITHUB_APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}
          permission-packages: write
          permission-contents: read

      - uses: actions/delete-package-versions@v5
        with:
          package-name: org.liquibase.ext.liquibase-checks
          package-type: "maven"
          token: ${{ steps.get-token.outputs.token }}
          ignore-versions: "^((?!${{ needs.get-liquibase-checks-version.outputs.version }}$).)*$"

  build-liquibase-checks:
    if: ${{ contains(inputs.extensions, 'liquibase-checks') }}
    needs:
      [
        delete-extension-packages,
        get-liquibase-checks-version,
        delete-checks-packages,
        matching-branch-logic-extensions,
      ]
    uses: liquibase/build-logic/.github/workflows/publish-for-liquibase.yml@main
    with:
      repository: liquibase/liquibase-checks
      version: ${{ needs.get-liquibase-checks-version.outputs.version }}
      branch: ${{ needs.matching-branch-logic-extensions.outputs.extensions_branch }}
    secrets: inherit

  build-and-deploy-extensions:
    needs:
      [
        delete-dependency-packages,
        delete-extension-packages,
        delete-checks-packages,
        matching-branch-logic-extensions,
        matching-branch-logic-pro,
      ]
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:

      - name: Configure AWS credentials for vault access
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.LIQUIBASE_VAULT_OIDC_ROLE_ARN }}
          aws-region: us-east-1

      - name: Get secrets from vault
        id: vault-secrets
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: |
            ,/vault/liquibase
          parse-json-secrets: true

      - name: Get GitHub App token
        id: get-token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ env.LIQUIBASE_GITHUB_APP_ID }}
          private-key: ${{ env.LIQUIBASE_GITHUB_APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}
          permission-contents: read
          permission-packages: write

      - name: Set up git password environment
        run: |
          echo "GIT_USERNAME=liquibot" >> $GITHUB_ENV
          echo "GIT_PASSWORD=${{ steps.get-token.outputs.token }}" >> $GITHUB_ENV

      - uses: actions/checkout@v4
        name: Checkout liquibase
        with:
          token: ${{ steps.get-token.outputs.token }}

      - uses: actions/checkout@v4
        name: Checkout liquibase-pro
        with:
          repository: liquibase/liquibase-pro
          ref: ${{ needs.matching-branch-logic-pro.outputs.pro_branch }}
          path: liquibase-pro
          token: ${{ steps.get-token.outputs.token }}

      - name: Checkout Dependencies
        run: |
          git config --global credential.helper store
          echo "https://$GIT_USERNAME:$GIT_PASSWORD@github.com" > ~/.git-credentials
          IFS=',' read -ra DEP_ARRAY <<< "${{ inputs.dependencies }}"
          for dep in "${DEP_ARRAY[@]}"; do
              dep=$(echo $dep | xargs)  # Remove leading and trailing whitespaces
              echo "Checking out $dep"
              git clone https://github.com/liquibase/$dep.git $dep
              git checkout ${{ inputs.branch }} || echo "Branch ${{ inputs.branch }} not found, staying on default branch"
          done

      - name: Convert escaped newlines and set GPG key
        run: |
          {
            echo "GPG_KEY_CONTENT<<GPG_EOF"
            printf '%b' "${{ env.GPG_SECRET }}"
            echo
            echo "GPG_EOF"
          } >> $GITHUB_ENV

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: "temurin"
          cache: "maven"
          gpg-private-key: ${{ env.GPG_KEY_CONTENT }}
          gpg-passphrase: GPG_PASSPHRASE
        env:
          GPG_PASSWORD: ${{ env.GPG_PASSPHRASE }}

      - name: Set up Maven
        uses: stCarolas/setup-maven@v5
        with:
          maven-version: ${{ env.MAVEN_VERSION }}

      - name: maven-settings-xml-action
        uses: whelk-io/maven-settings-xml-action@v22
        with:
          repositories: |
            [
              {
                "id": "liquibase",
                "url": "https://maven.pkg.github.com/liquibase/liquibase",
                "releases": {
                  "enabled": "true"
                },
                "snapshots": {
                  "enabled": "true",
                  "updatePolicy": "always"
                }
              },
              {
                "id": "liquibase-pro",
                "url": "https://maven.pkg.github.com/liquibase/liquibase-pro",
                "releases": {
                  "enabled": "true"
                },
                "snapshots": {
                  "enabled": "true",
                  "updatePolicy": "always"
                }
              }
            ]
          servers: |
            [
              {
                "id": "liquibase",
                "username": "liquibot",
                "password": "${{ env.LIQUIBOT_PAT_GPM_ACCESS }}"
              },
              {
                "id": "liquibase-pro",
                "username": "liquibot",
                "password": "${{ env.LIQUIBOT_PAT_GPM_ACCESS }}"
              }
            ]

      - name: Install liquibase 0-SNAPSHOT
        run: mvn clean install -DskipTests

      - name: Install liquibase-commercial 0-SNAPSHOT
        run: |
          cd liquibase-pro
          mvn clean install -DskipTests -P '!run-proguard'
          cd ..

      - name: Re-version and build Dependencies
        env:
          GPG_PASSWORD: ${{ env.GPG_PASSPHRASE }}
        if: ${{ inputs.dependencies != '' }}
        continue-on-error: true
        run: |
          scripts_branch=${{ inputs.branch }}
          IFS=',' read -ra DEP_ARRAY <<< "${{ inputs.dependencies }}"
          for dep in "${DEP_ARRAY[@]}"; do
            dep=$(echo $dep | xargs)  # Remove leading and trailing whitespaces
            echo "Re-versioning $dep"
            cd $dep
            sed -i "s/<liquibase.version>.*<\/liquibase.version>/<liquibase.version>0-SNAPSHOT<\/liquibase.version>/" pom.xml
            mvn versions:set -DnewVersion=0-SNAPSHOT
            mvn clean install -DskipTests
            mkdir -p $PWD/.github/util/
            curl -o $PWD/.github/util/re-version.sh https://raw.githubusercontent.com/liquibase/liquibase/$scripts_branch/.github/util/re-version.sh
            curl -o $PWD/.github/util/sign-artifacts.sh https://raw.githubusercontent.com/liquibase/liquibase/$scripts_branch/.github/util/sign-artifacts.sh
            curl -o $PWD/.github/util/ManifestReversion.java https://raw.githubusercontent.com/liquibase/liquibase/$scripts_branch/.github/util/ManifestReversion.java
            chmod +x $PWD/.github/util/re-version.sh
            chmod +x $PWD/.github/util/sign-artifacts.sh
            chmod +x $PWD/.github/util/ManifestReversion.java
            $PWD/.github/util/re-version.sh ./target "${{ inputs.liquibase-version  }}" "${{ inputs.branch }}" ${dep}
            $PWD/.github/util/sign-artifacts.sh ./target "${{ inputs.liquibase-version }}" "${{ inputs.branch }}"
            mvn versions:set -DnewVersion=${{ inputs.liquibase-version }}
            sed -i -e "s/<liquibase.version>0-SNAPSHOT<\/liquibase.version>/<liquibase.version>${{ inputs.liquibase-version }}<\/liquibase.version>/g" pom.xml
            mvn deploy:deploy-file \
            -Dfile=./re-version/out/${dep}-${{ inputs.liquibase-version }}.jar \
            -Dsources=./re-version/out/${dep}-${{ inputs.liquibase-version }}-sources.jar \
            -Djavadoc=./re-version/out/${dep}-${{ inputs.liquibase-version }}-javadoc.jar \
            -DrepositoryId=liquibase \
            -Durl=https://maven.pkg.github.com/liquibase/$dep \
            -DpomFile=pom.xml
            cd ..
          done

      - name: Checkout and build Extensions
        env:
          GPG_PASSWORD: ${{ env.GPG_PASSPHRASE }}
        continue-on-error: true
        run: |
          matching_branch=${{ needs.matching-branch-logic-extensions.outputs.extensions_branch }}

          # if matching_branch is main set liqubase_branch to master as liquibase has no main branch
          if [ "$matching_branch" == "main" ]; then
            liquibase_branch="master"
          else
            liquibase_branch=$matching_branch
          fi
          
          git config --global credential.helper store
          echo "https://$GIT_USERNAME:$GIT_PASSWORD@github.com" > ~/.git-credentials
          IFS=',' read -ra EXT_ARRAY <<< "${{ inputs.extensions }}"
          for ext in "${EXT_ARRAY[@]}"; do
            ext=$(echo $ext | xargs)  # Remove leading and trailing whitespaces
            if [ "$ext" != "liquibase-checks" ]; then
              echo "Checking out and building $ext"
              git clone https://github.com/liquibase/$ext.git $ext
              cd $ext
              git checkout $matching_branch || echo "Branch $matching_branch not found, staying on default"
              sed -i "s/<liquibase.version>.*<\/liquibase.version>/<liquibase.version>0-SNAPSHOT<\/liquibase.version>/" pom.xml
              mvn versions:set -DnewVersion=0-SNAPSHOT

              for dep in "${DEP_ARRAY[@]}"; do
                dep=$(echo $dep | xargs)
                sed -i "/<artifactId>${dep//./\\.}<\/artifactId>/{N; s/<version>.*<\/version>/<version>${{ inputs.liquibase-version }}<\/version>/}" pom.xml || true
              done

              mvn clean install -DskipTests
              mkdir -p $PWD/.github/util/
              curl -o $PWD/.github/util/re-version.sh https://raw.githubusercontent.com/liquibase/liquibase/$liquibase_branch/.github/util/re-version.sh
              curl -o $PWD/.github/util/sign-artifacts.sh https://raw.githubusercontent.com/liquibase/liquibase/$liquibase_branch/.github/util/sign-artifacts.sh
              curl -o $PWD/.github/util/ManifestReversion.java https://raw.githubusercontent.com/liquibase/liquibase/$liquibase_branch/.github/util/ManifestReversion.java
              chmod +x $PWD/.github/util/re-version.sh
              chmod +x $PWD/.github/util/sign-artifacts.sh
              chmod +x $PWD/.github/util/ManifestReversion.java
              $PWD/.github/util/re-version.sh ./target "${{ inputs.liquibase-version  }}" "${{ inputs.branch }}" ${ext}
              $PWD/.github/util/sign-artifacts.sh ./target "${{ inputs.liquibase-version }}" "${{ inputs.branch }}"
              mvn versions:set -DnewVersion=${{ inputs.liquibase-version }}
              sed -i -e "s/<liquibase.version>0-SNAPSHOT<\/liquibase.version>/<liquibase.version>${{ inputs.liquibase-version }}<\/liquibase.version>/g" pom.xml
              mvn deploy:deploy-file \
              -Dfile=./re-version/out/${ext}-${{ inputs.liquibase-version }}.jar \
              -Dsources=./re-version/out/${ext}-${{ inputs.liquibase-version }}-sources.jar \
              -Djavadoc=./re-version/out/${ext}-${{ inputs.liquibase-version }}-javadoc.jar \
              -DrepositoryId=liquibase \
              -Durl=https://maven.pkg.github.com/liquibase/$ext \
              -DpomFile=pom.xml
              cd ..
            fi
          done
