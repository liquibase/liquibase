name: Dependabot Auto-merge

# =============================================================================
# CONSERVATIVE AUTO-MERGE FOR PUBLIC REPOSITORY
# =============================================================================
# This workflow implements a conservative auto-merge strategy for dependabot PRs
# in the public Liquibase repository. Only low-risk updates are auto-merged:
# - Test dependencies (patch/minor updates only)
# - Build tools (patch/minor updates only)
# - GitHub Actions (patch/minor updates only)
# Production dependencies always require manual review.

on:
  pull_request_target:
    types: [opened, synchronize, reopened, ready_for_review]

permissions:
  contents: write
  pull-requests: write
  checks: read

jobs:
  # =============================================================================
  # SAFETY CHECKS & VALIDATION
  # =============================================================================
  dependabot-automerge:
    name: Auto-merge low-risk dependabot updates
    if: github.actor == 'dependabot[bot]'
    runs-on: ubuntu-latest

    steps:
      - name: Check PR metadata
        id: metadata
        uses: dependabot/fetch-metadata@v2
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"

      - name: Determine if auto-merge is appropriate
        id: should-automerge
        run: |
          echo "Analyzing PR for auto-merge eligibility..."
          ecosystem="${{ steps.metadata.outputs.package-ecosystem }}"
          update_type="${{ steps.metadata.outputs.update-type }}"
          dependencies="${{ steps.metadata.outputs.dependency-names }}"
          echo "Package ecosystem: \"$ecosystem\""
          echo "Update type: \"$update_type\""
          echo "Dependency names: \"$dependencies\""
          # Initialize auto-merge decision
          auto_merge="false"
          reason="Not eligible"
          # Check if patch or minor update (no major updates auto-merged)
          if [[ "$update_type" == "version-update:semver-patch" ]] || \
             [[ "$update_type" == "version-update:semver-minor" ]]; then

            # GitHub Actions - generally safe to auto-merge
            if [[ "$ecosystem" == "github-actions" ]]; then
              auto_merge="true"
              reason="GitHub Actions patch/minor update"
            # Maven dependencies - check if they're in safe categories
            elif [[ "$ecosystem" == "maven" ]]; then

              # Check if PR has test-deps or build-tools labels  
              pr_labels='${{ toJson(github.event.pull_request.labels.*.name) }}'
              if echo "$pr_labels" | grep -q "test-deps"; then
                has_test_label="true"
              else
                has_test_label="false"
              fi
              if echo "$pr_labels" | grep -q "build-tools"; then
                has_build_label="true"
              else
                has_build_label="false"
              fi
              if [[ "$has_test_label" == "true" ]]; then
                auto_merge="true"
                reason="Test dependency patch/minor update"
              elif [[ "$has_build_label" == "true" ]]; then
                auto_merge="true"
                reason="Build tool patch/minor update"
              else
                reason="Production dependency - requires manual review"
              fi
            fi
          else
            reason="Major version update - requires manual review"
          fi
          echo "Auto-merge decision: \"$auto_merge\""
          echo "Reason: \"$reason\""
          echo "auto-merge=$auto_merge" >> "$GITHUB_OUTPUT"
          echo "reason=$reason" >> "$GITHUB_OUTPUT"

      # =============================================================================
      # WAIT FOR CI VALIDATION
      # =============================================================================
      - name: Wait for CI to pass
        if: steps.should-automerge.outputs.auto-merge == 'true'
        uses: fountainhead/action-wait-for-check@v1.2.0
        id: wait-for-ci
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          checkName: "Unit and Integration Tests"
          ref: ${{ github.event.pull_request.head.sha }}
          timeoutSeconds: 3600  # 1 hour timeout
          intervalSeconds: 30

      # =============================================================================
      # AUTO-MERGE EXECUTION
      # =============================================================================
      - name: Auto-merge dependabot PR
        if: >
          steps.should-automerge.outputs.auto-merge == 'true' &&
          steps.wait-for-ci.outputs.conclusion == 'success'
        run: |
          echo "✅ All conditions met for auto-merge:"
          echo "   - Update type: ${{ steps.metadata.outputs.update-type }}"
          echo "   - Category: ${{ steps.should-automerge.outputs.reason }}"
          echo "   - CI Status: ${{ steps.wait-for-ci.outputs.conclusion }}"
          echo ""
          pr_number="${{ github.event.pull_request.number }}"
          echo "🤖 Auto-merging PR #$pr_number..."

          gh pr merge --squash --auto "$pr_number"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # =============================================================================
      # LOGGING & NOTIFICATION
      # =============================================================================
      - name: Log auto-merge decision
        run: |
          if [[ "${{ steps.should-automerge.outputs.auto-merge }}" == "true" ]]; then
            if [[ "${{ steps.wait-for-ci.outputs.conclusion }}" == "success" ]]; then
              echo "✅ PR auto-merged successfully"
              deps="${{ steps.metadata.outputs.dependency-names }}"
              uptype="${{ steps.metadata.outputs.update-type }}"
              rsn="${{ steps.should-automerge.outputs.reason }}"
              echo "📦 Dependencies: $deps"
              echo "🏷️ Update type: $uptype"
              echo "📝 Reason: $rsn"
            else
              echo "❌ Auto-merge skipped - CI failed or timed out"
              ci_conclusion="${{ steps.wait-for-ci.outputs.conclusion }}"
              echo "🔄 CI conclusion: $ci_conclusion"
            fi
          else
            echo "⏭️ Auto-merge skipped"
            echo "📝 Reason: ${{ steps.should-automerge.outputs.reason }}"
            echo "👥 Manual review required"
          fi

      - name: Comment on PR if manual review needed
        if: steps.should-automerge.outputs.auto-merge == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `🔍 **Manual Review Required**

              This dependabot PR requires manual review because:
              **${{ steps.should-automerge.outputs.reason }}**

              Auto-merge is only enabled for:
              - ✅ Test dependencies (patch/minor updates)
              - ✅ Build tools (patch/minor updates)
              - ✅ GitHub Actions (patch/minor updates)

              Production dependencies and major version updates always require
              manual review to ensure compatibility and stability.`
            })
