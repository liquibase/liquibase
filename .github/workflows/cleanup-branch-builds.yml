name: Cleanup on Branch Delete

on:
  workflow_dispatch:
  delete:
    branches:
      - '**DAT-**'
      - 'github-action-**'
      - 'dependabot-**'
      - 'feat/**'
jobs:
  delete-package:
    name: Delete Github Package for Branch
    runs-on: ubuntu-22.04
    steps:

    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 
        ref: ${{ github.event.ref }}

    - name: Extract branch name
      shell: bash
      run: |
        BRANCH_NAME=${GITHUB_REF#refs/heads/}
        echo "Branch name is $BRANCH_NAME"
        echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

    - name: Get commits between ${{ env.BRANCH_NAME }} and master
      run: |
        git fetch origin master
        COMMITS=$(git rev-list --reverse ${GITHUB_SHA}..origin/master)
        COMMITS_LIST=$(echo "$COMMITS" | tr '\n' ',' | sed 's/,$//')
        echo "COMMITS_LIST=$COMMITS_LIST" >> $GITHUB_ENV
        echo "Commits between $BRANCH_NAME and master: $COMMITS_LIST"

    - name: Get commits between ${{ env.BRANCH_NAME }} and release
      run: |
        git fetch origin release
        COMMITS=$(git rev-list --reverse ${GITHUB_SHA}..origin/release)
        COMMITS_LIST=$(echo "$COMMITS" | tr '\n' ',' | sed 's/,$//')
        echo "COMMITS_LIST_RELEASE=$COMMITS_LIST" >> $GITHUB_ENV
        echo "Commits between $BRANCH_NAME and release: $COMMITS_LIST"

    - name: Prepare list of package versions to delete
      id: prepare-packages
      run: |
        MASTER_COMMITS="${{ env.COMMITS_LIST }}"
        RELEASE_COMMITS="${{ env.COMMITS_LIST_RELEASE }}"
        PACKAGE_VERSIONS=""

        for COMMIT in $(echo "$MASTER_COMMITS,$RELEASE_COMMITS" | tr ',' '\n'); do
          if [ -n "$COMMIT" ]; then
            PACKAGE_VERSIONS="${PACKAGE_VERSIONS}${COMMIT}-SNAPSHOT,"
          fi
        done

        # Remove trailing comma
        PACKAGE_VERSIONS="${PACKAGE_VERSIONS%,}"
        echo "PACKAGE_VERSIONS=$PACKAGE_VERSIONS" >> $GITHUB_ENV
        echo "Package versions to query: $PACKAGE_VERSIONS"

    - name: Get package version IDs
      run: |
        PACKAGE_IDS=""
        for VERSION in $(echo "${{ env.PACKAGE_VERSIONS }}" | tr ',' '\n'); do
          echo "Processing version: $VERSION"
          ID=$(curl -s -H "Authorization: bearer ${{ secrets.GITHUB_TOKEN }}" -X POST -d "{\"query\": \"query { repository(owner: \\\"liquibase\\\", name: \\\"liquibase\\\") { packages(first: 100) { nodes { name versions(first: 100, where: {version: \\\"$VERSION\\\"}) { nodes { id } } } } } } }\"}" https://api.github.com/graphql | jq -r '.data.repository.packages.nodes[].versions.nodes[].id')
    
          if [ -n "$ID" ]; then
            echo "Found ID: $ID for version $VERSION"
            PACKAGE_IDS="${PACKAGE_IDS}${ID},"
          else
            echo "No ID found for version $VERSION"
          fi
        done
    
        # Remove trailing comma and update the PACKAGE_IDS in the environment
        PACKAGE_IDS="${PACKAGE_IDS%,}"
        echo "Final package IDs: $PACKAGE_IDS"
        echo "PACKAGE_IDS=$PACKAGE_IDS" >> $GITHUB_ENV

      # Get version id(s) based on version name
    - uses: castlabs/get-package-version-id-action@v2.2
      id: version
      with:
        version: "${{ env.BRANCH_NAME }}-SNAPSHOT"

      # show versions to delete
    - run: |
        echo "Version to delete ${{ steps.version.outputs.ids }} for ${{ env.BRANCH_NAME }}-SNAPSHOT"
    
    - uses: actions/delete-package-versions@v3
      if: ${{ steps.version.outputs.ids != '' }}
      with:
        package-type: maven
        # The number of latest versions to keep.
        # This cannot be specified with `num-old-versions-to-delete`. By default, `num-old-versions-to-delete` takes precedence over `min-versions-to-keep`.
        # When set to 0, all deletable versions will be deleted.
        # When set greater than 0, all deletable package versions except the specified number will be deleted.
        min-versions-to-keep: 0
        
        # on branch id's deletion we only want to delete that particular branch version
        package-version-ids: "${{ steps.version.outputs.ids }}"
