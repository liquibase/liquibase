name: Build and Publish (Matching Branch)

#the concurrency check will cancel in-progress runs on non-master branches and pull requests on forked repositories, but not on the specified branches (master, github-action-**, DAT-**, dependabot-**).
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref && github.ref || github.run_id }}
  cancel-in-progress: false


on:
  push:
    branches:
      - master
      - github-action-**
      - DAT-**
      - dependabot-**
    paths-ignore:
          - '**.md'
  workflow_dispatch:

env:
  MAVEN_VERSION: '3.9.2'

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-22.04
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    outputs:
      branchExistsInBoth: ${{ steps.check-branch.outputs.branchExistsInBoth }}
      thisBranchName: ${{ steps.get-branch-name.outputs.thisBranchName }}
      latestMergeSha: ${{ steps.get-sha.outputs.latestMergeSha }}
      timeStamp: ${{ steps.get-timestamp.outputs.timestamp }}
    steps:

      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha || github.event.after}}
      - name: Get Latest Merge Commit SHA
        id: get-sha
        run: |
          latest_merge_sha=`(git rev-parse --short HEAD)`
          echo "latestMergeSha=${latest_merge_sha}" >> $GITHUB_OUTPUT

      - name: Get Timestamp
        id: get-timestamp
        run: |
          timeStamp=$(date +'%Y-%m-%d %H:%M:%S %Z')
          echo "timestamp=${timeStamp}" >> $GITHUB_OUTPUT

      - name: Get Current BranchName
        id: get-branch-name
        run: |
          # this logic checks if the branch is from a forked repository PR or not. Where -n is the inverse of -z (not empty)
          if [ -n "${GITHUB_HEAD_REF}" ];
          then
            branch_name=${GITHUB_HEAD_REF}
          else
            branch_name=${{ github.ref_name }}
          fi 
          
          modified_branch_name=`(echo $branch_name | tr / -)`
          echo "thisBranchName=$modified_branch_name" >> $GITHUB_OUTPUT          
          echo $modified_branch_name   

      - name: Checkout OSS Repo
        uses: actions/checkout@v3
        with:
          repository: liquibase/liquibase

      #RUN THIS LOGIC WHEN THERE IS A SAME BRANCH IN OSS AND PRO

      #checking if the branch specified by $currentBranch exists in the PRO repository, If the getBranch call throws an error, it means the branch doesn't exist in the PRO repo. Also, remove refs/heads/
      - name: Check branch existence
        id: check-branch
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.LIQUIBOT_PAT_GPM_ACCESS }}
          script: |
            const currentBranch = context.ref.replace("refs/heads/",""); 
            let branchExistsInBoth;
            try {
              await github.rest.repos.getBranch({
                owner: "liquibase",
                repo: "liquibase-pro",
                branch: currentBranch
              });
              branchExistsInBoth = true
            } catch (error){
              branchExistsInBoth = false
            }
            core.setOutput("branchExistsInBoth", branchExistsInBoth)
          
  run-tests:
    needs: [setup]
    if: needs.setup.outputs.branchExistsInBoth == 'true'
    uses: liquibase/liquibase/.github/workflows/run-tests.yml@github-action-DAT-15775
    secrets: inherit


  build_branch:
    name: Build & Package
    runs-on: ubuntu-22.04
    needs: [setup, run-tests]
    if: needs.setup.outputs.branchExistsInBoth == 'true'
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha || github.event.after}}
      - name: Set up Java for publishing to GitHub Repository
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'
          server-id: liquibase
          overwrite-settings: false

      - name: Set up Maven
        uses: stCarolas/setup-maven@v4.5
        with:
          maven-version: ${{ env.MAVEN_VERSION }}

      # Publish <commitsha>-SNAPSHOT version to GPM
      - name: Version Artifact
        run: |
          mvn versions:set "-DnewVersion=${{ needs.setup.outputs.latestMergeSha }}-SNAPSHOT"

      - name: Publish <commitsha>-SNAPSHOT package
        run: |
          mvn -B clean deploy -pl '!liquibase-dist' -DskipTests=true "-Dbuild.repository.owner=liquibase" "-Dbuild.repository.name=liquibase" "-Dbuild.branch=${{ needs.setup.outputs.branch_name }}" "-Dbuild.number=${{ github.run_number }}" "-Dbuild.commit=${{ needs.setup.outputs.latestMergeSha }}" "-Dbuild.timestamp=${{ needs.setup.outputs.timeStamp }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Publish branch-SNAPSHOT version to GPM
      - name: Version Artifact
        run: |
          mvn versions:set "-DnewVersion=${{ needs.setup.outputs.thisBranchName }}-SNAPSHOT"

      - name: Publish branch-SNAPSHOT package
        run: |
          mvn -B clean deploy -pl '!liquibase-dist' -DskipTests=true "-Dbuild.repository.owner=liquibase" "-Dbuild.repository.name=liquibase" "-Dbuild.branch=${{ needs.setup.outputs.thisBranchName }}" "-Dbuild.number=${{ github.run_number }}" "-Dbuild.commit=${{ needs.setup.outputs.latestMergeSha }}" "-Dbuild.timestamp=${{ needs.setup.outputs.timeStamp }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            
            
      # look for dependencies in maven
      - name: maven-settings-xml-action
        uses: whelk-io/maven-settings-xml-action@v21
        with:
          repositories: |
            [
              {
                "id": "liquibase",
                "url": "https://maven.pkg.github.com/liquibase/liquibase",
                "releases": {
                  "enabled": "false"
                },
                "snapshots": {
                  "enabled": "true",
                  "updatePolicy": "always"
                }
              },
              {
                "id": "liquibase-pro",
                "url": "https://maven.pkg.github.com/liquibase/liquibase-pro",
                "releases": {
                  "enabled": "false"
                },
                "snapshots": {
                  "enabled": "true",
                  "updatePolicy": "always"
                }
              }
            ]
          servers: |
            [
              {
                "id": "liquibase-pro",
                "username": "liquibot",
                "password": "${{ secrets.LIQUIBOT_PAT }}"
              },
              {
                "id": "liquibase",
                "username": "liquibot",
                "password": "${{ secrets.LIQUIBOT_PAT }}"
              }
            ]


      #publish_tar_package_to_build_artifact:
      - name: Build & Publish tar.gz to Build Artifact Page
        env:
          INSTALL4J_LICENSE: ${{ secrets.INSTALL4J_LICENSE }}
          INSTALL4J_APPLE_KEY: ${{ secrets.INSTALL4J_APPLE_KEY }}
          INSTALL4J_APPLE_KEY_PASSWORD: ${{ secrets.INSTALL4J_APPLE_KEY_PASSWORD }}
          INSTALL4J_APPLE_ID: ${{ secrets.INSTALL4J_APPLE_ID }}
          INSTALL4J_APPLE_ID_PASSWORD: ${{ secrets.INSTALL4J_APPLE_ID_PASSWORD }}
          INSTALL4J_WINDOWS_KEY: ${{ secrets.INSTALL4J_WINDOWS_KEY }}
          INSTALL4J_WINDOWS_KEY_PASSWORD: ${{ secrets.INSTALL4J_WINDOWS_KEY_PASSWORD }}
          GPG_PASSWORD: ${{ secrets.GPG_PASSPHRASE }}
          GITHUB_TOKEN: ${{ secrets.LIQUIBOT_PAT }}
        run: |
          ## save install4j code signing keys
          mkdir -p liquibase-dist/target/keys
          echo "Saving apple key"
          echo "$INSTALL4J_APPLE_KEY" | base64 -d > liquibase-dist/target/keys/datical_apple.p12

          echo "Saving windows key"
          echo "$INSTALL4J_WINDOWS_KEY" | base64 -d > liquibase-dist/target/keys/datical_windows.pfx

          mvn versions:set -DnewVersion=${{ needs.setup.outputs.thisBranchName }}-SNAPSHOT

          # we are packaging and deploying liquibase tar which includes liquibase-commercial
          mvn -B -pl liquibase-dist -P liquibase-commercial source:jar package "-Dliquibase-pro.version=${{ needs.setup.outputs.thisBranchName }}-SNAPSHOT" "-Dbuild.repository.owner=liquibase" "-Dbuild.repository.name=liquibase" "-Dbuild.branch=${{ needs.setup.outputs.thisBranchName }}" "-Dbuild.number=${{ github.run_number }}" "-Dbuild.commit=${{ needs.setup.outputs.latestMergeSha }}-SNAPSHOT" "-Dbuild.timestamp=${{ needs.setup.outputs.timeStamp }}"

          ## extract tar content for other artifacts
          mkdir -p liquibase-dist/target/liquibase-${{ needs.setup.outputs.thisBranchName }}-SNAPSHOT
          ls -l liquibase-dist/target
          (cd liquibase-dist/target/liquibase-${{ needs.setup.outputs.thisBranchName }}-SNAPSHOT && tar -xzf ../liquibase-${{ needs.setup.outputs.thisBranchName }}-SNAPSHOT.tar.gz)

          mkdir -p artifacts
          cp liquibase-dist/target/liquibase-${{ needs.setup.outputs.thisBranchName }}-SNAPSHOT.tar.gz artifacts

          mkdir artifacts-named
          cp liquibase-dist/target/liquibase-${{ needs.setup.outputs.thisBranchName }}-SNAPSHOT.tar.gz artifacts-named/liquibase-${{ needs.setup.outputs.thisBranchName }}.tar.gz

      - name: Archive Packages
        uses: actions/upload-artifact@v3
        with:
          name: liquibase-artifacts
          path: artifacts/*

      - name: Archive Convenience Zip
        uses: actions/upload-artifact@v3
        with:
          name: liquibase-zip-${{ needs.setup.outputs.thisBranchName }}
          path: liquibase-dist/target/liquibase-${{ needs.setup.outputs.thisBranchName }}-SNAPSHOT/*

      - name: Archive Convenience Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: liquibase-artifacts-${{ needs.setup.outputs.thisBranchName }}
          path: artifacts-named/*

  #- trigger functional tests on label runFunctionalTests
