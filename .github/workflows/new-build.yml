name: Build and Publish (Matching Branch)

#the concurrency check will cancel in-progress runs on non-master branches and pull requests on forked repositories, but not on the specified branches (master, main, and pair-branch-**).
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref && github.ref || github.run_id }}
  cancel-in-progress: true

on:
  push:
    branches:
      - github-action-**
      - DAT-**
      - dependabot-**
    paths-ignore:
          - '**.md'
#    workflow_run:
#      workflows: [ "Run matching branch PRs" ]
#      types:
#        - requested

env:
  MAVEN_VERSION: '3.9.2'

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-22.04
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    outputs:
      branchExistsInBoth: ${{ steps.check-branch.outputs.branchExistsInBoth }}
      branch_name: ${{ steps.find-matching-branch.outputs.branch_name }}
      latestMergeSha: ${{ steps.get-sha.outputs.latestMergeSha }}
      timeStamp: ${{ steps.get-timestamp.outputs.timestamp }}
    steps:

      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha || github.event.after}}
      - name: Get Latest Merge Commit SHA
        id: get-sha
        run: |
          latest_merge_sha=`(git rev-parse --short HEAD)`
          echo "latestMergeSha=${latest_merge_sha}" >> $GITHUB_OUTPUT

      - name: Get Timestamp
        id: get-timestamp
        run: |
          timeStamp=$(date +'%Y-%m-%d %H:%M:%S %Z')
          echo "timestamp=${timeStamp}" >> $GITHUB_OUTPUT

      - name: Get Current BranchName
        id: get-branch-name
        run: |
          # this logic checks if the branch is from a forked repository PR or not. Where -n is the inverse of -z (not empty)
          if [ -n "${GITHUB_HEAD_REF}" ];
          then
            branch_name=${GITHUB_HEAD_REF}
          else
            branch_name=${{ github.ref_name }}
          fi 
          
          modified_branch_name=`(echo $branch_name | tr / -)`
          echo "thisBranchName=$modified_branch_name" >> $GITHUB_OUTPUT          
          echo $thisBranchName   

      - name: Checkout OSS Repo
        uses: actions/checkout@v3
        with:
          repository: liquibase/liquibase

      #RUN THIS LOGIC WHEN THERE IS A SAME BRANCH IN OSS AND PRO

      #checking if the branch specified by $branch_name exists in the OSS repository, If the output is empty (meaning the branch doesn't exist in the remote repository), then the condition will be true. Also, remove refs/heads/
      - name: Check branch existence
        id: check-branch
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.LIQUIBOT_PAT_GPM_ACCESS }}
          script: |
            console.log(github)
            const branchNamePrefix = "pair-branch-";
            const repositories = ['liquibase', 'liquibase-pro'];
      
            const branchExistenceResults = await Promise.all(repositories.map(async (repo) => {
              const resp = await github.rest.repos.listBranches({
                owner: "liquibase",
                repo,
              });
              const branches = resp.data.branches || [];
              return branches.some((branchName) => branchName.name.startsWith(branchNamePrefix));
            }));

            const branchExistsInBoth = branchExistenceResults.every((exists) => exists);
            core.setOutput("branchExistsInBoth", branchExistsInBoth)
          
  run-tests:
    needs: [setup]
    if: needs.setup.outputs.branchExistsInBoth == 'true'
    uses: liquibase/liquibase/.github/workflows/run-tests.yml@github-action-DAT-15775
    secrets: inherit


  build_branch:
    name: Build & Package
    runs-on: ubuntu-22.04
    needs: [setup, run-tests]
    if: needs.setup.outputs.branchExistsInBoth == 'true'
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha || github.event.after}}
      - name: Set up Java for publishing to GitHub Repository
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'
          server-id: liquibase

      - name: Set up Maven
        uses: stCarolas/setup-maven@v4.5
        with:
          maven-version: ${{ env.MAVEN_VERSION }}

      # Publish <commitsha>-SNAPSHOT version to GPM
      - name: Version Artifact
        run: |
          mvn versions:set "-DnewVersion=${{ needs.setup.outputs.latestMergeSha }}-SNAPSHOT"

      - name: Publish <commitsha>-SNAPSHOT package
        run: |
          mvn -B clean deploy -pl '!liquibase-dist' -DskipTests=true "-Dbuild.repository.owner=liquibase" "-Dbuild.repository.name=liquibase" "-Dbuild.branch=${{ needs.setup.outputs.branch_name }}" "-Dbuild.number=${{ github.run_number }}" "-Dbuild.commit=${{ needs.setup.outputs.latestMergeSha }}" "-Dbuild.timestamp=${{ needs.setup.outputs.timeStamp }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


      # Publish branch-SNAPSHOT version to GPM
      - name: Version Artifact
        run: |
          mvn versions:set "-DnewVersion=${{ needs.setup.outputs.thisBranchName }}-SNAPSHOT"

      - name: Publish branch-SNAPSHOT package
        run: |
          mvn -B clean deploy -pl '!liquibase-dist' -DskipTests=true "-Dbuild.repository.owner=liquibase" "-Dbuild.repository.name=liquibase" "-Dbuild.branch=${{ needs.setup.outputs.branch_name }}" "-Dbuild.number=${{ github.run_number }}" "-Dbuild.commit=${{ needs.setup.outputs.latestMergeSha }}" "-Dbuild.timestamp=${{ needs.setup.outputs.timeStamp }}"

      #Publish to GitHub Packages. We are building a tar file which includes liquibase-commercial hence we need "-Dliquibase-pro.version". As this workflow is for matching branch, we can use the same branch as OSS branch for -Dliquibase-pro.version
      - name: Publish tar.gz package to GPM
        run: |
          mvn -B -pl liquibase-dist -P liquibase-commercial clean deploy -DskipTests=true "-Dliquibase-pro.version=${{ needs.setup.outputs.branch_name }}-SNAPSHOT" "-Dbuild.timestamp=${{ needs.setup.outputs.timeStamp }}" "-Dbuild.repository.owner=liquibase" "-Dbuild.repository.name=liquibase" "-Dbuild.branch=${{ needs.setup.outputs.branch_name }}" "-Dbuild.number=${{ github.run_number }}" "-Dbuild.commit=${{ needs.setup.outputs.latestMergeSha }}"
          env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}



  #- trigger functional tests on label runFunctionalTests
  #- trigger test-harness on label runTestHarnessTests
